
<?php
 ini_set('memory_limit', '-1'); use Discord\Discord; use Discord\Parts\Channel\Message; include __DIR__ . '/vendor/autoload.php'; require __DIR__ . '/lib/requires.php'; if(sizeof($argv) != 2) { if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') { $configLoc = '%APPDATA%/wumpus-copy/config.json'; } else { $configLoc = '/etc/wumpus-copy/config.json'; } } else { $configLoc = $argv[1]; } $config = new config_manager($configLoc); $mainLoop = React\EventLoop\Factory::create(); $monitorDiscord = new Discord([ 'token' => $config->get_individual_token(), 'loop' => $mainLoop, 'logging' => FALSE ]); $depositDiscord = new Discord([ 'token' => $config->get_token(), 'loop' => $mainLoop, 'logging' => FALSE ]); $monitorReadyHandler = function(Discord $discord) use($config) { $discord->on('message', function (Message $message) use ($config) { if(in_array($message->channel_id, $config->get_monitored_channels())) { say("[Monitor]: Found Message; adding to queue...", 0); if(!$config->add_deposit_queue($message)) { say("ERROR!"); } else { say("OK!"); } } }); say("Monitor Instance Ready!"); }; $depositReadyHandler = function(Discord $discord) use($config) { say("Deposit Instance Ready!"); }; $queueProcessLoop = function() use ($config, $depositDiscord) { $queue = $config->get_deposit_queue(); if(sizeof($queue) > 0) { say("[Deposit]: Queue populated; processing '" . sizeof($queue) . "' message(s)... "); $sent = 0; $errors = 0; foreach($queue as $message) { $destinations = $config->get_deposits_for_source_channel($message->channel_id); foreach($destinations as $destination) { $result = $destination->send_message($config, $depositDiscord, $message); if($result != 1) { $errors += 1; } else { $sent += 1; } } } if($errors == 0 && $sent > 0) { say("[Deposit]: All queue items processed successfully; sent '" . $sent . "' message(s)."); } elseif($errors > 0 && $sent > 0) { say("[Deposit]: All queue items processed successfully; sent '" . $sent . "' message(s)."); } elseif($errors > 0 && $sent == 0) { say("[Deposit]: ERROR! All {$errors} queue items failed to process."); } } $config->clear_deposit_queue($queue); }; $mainLoop->addPeriodicTimer($config->get_queue_interval(), $queueProcessLoop); $monitorDiscord->on('ready', $monitorReadyHandler); $depositDiscord->on('ready', $depositReadyHandler); $mainLoop->run(); 