/* groovylint-disable */


void setBuildStatus(String message, String state) {
    step([
        $class: 'GitHubCommitStatusSetter',
        reposSource: [$class: 'ManuallyEnteredRepositorySource', url: 'https://github.com/ooobii/wumpus-copy'],
        contextSource: [$class: 'ManuallyEnteredCommitContextSource', context: 'jenkinsci/build-win'],
        errorHandlers: [[$class: 'ChangingBuildStatusErrorHandler', result: 'UNSTABLE']],
        statusResultSource: [ $class: 'ConditionalStatusResultSource', results: [[$class: 'AnyBuildResult', message: message, state: state]] ]
    ])
}


pipeline {
    agent { label 'windows' }
    stages {
        stage('Clone Repository') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: "${GIT_BRANCH}"]],
                    extensions: [[$class: 'WipeWorkspace']],
                    userRemoteConfigs: [[url: 'git@github.com:ooobii/wumpus-copy.git']]
                ])
            // sh "git clone --branch $BRANCH_NAME git@github.com:ooobii/wumpus-copy.git ."
            }
        }
        stage('Install Composer') {
            steps {
                powershell('''
                Invoke-WebRequest -Uri "https://getcomposer.org/installer" -OutFile ".\\composer-setup.php"
                mkdir composer
                php composer-setup.php --install-dir=.\\composer --filename=composer.php
                Remove-Item .\\composer-setup.php
                ''')
            }
        }
        stage('Install Composer Packages') {
            steps{
                powershell 'php .\\composer\\composer.php install'
            }
        }
        stage('Remove Composer') {
            steps{
                powershell 'Remove-Item -Recurse -Force -Path .\\composer'
            }
        }
        stage('Execute Tests') {
            steps {
                script {
                    try {
                        powershell 'php .\\vendor\\phpunit\\phpunit\\phpunit --configuration .\\test\\phpunit.xml'
                    }
                    catch (exc) {
                        echo 'WARNING: Tests Failed! Attempting to continue with package build...'
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }

    }

    post {
        success {
            setBuildStatus('Build Successful', 'SUCCESS')
        }
        failure {
            setBuildStatus('Failure', 'FAILURE')
        }
        unstable {
            setBuildStatus('Unstable', 'UNSTABLE')
        }
         always {
        //     //archiveArtifacts artifacts: 'build/*.exe', fingerprint: true
             junit 'test/logs/*.xml'
         }
    }
}
